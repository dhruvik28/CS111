Dhruvik Patel, dp811

Problem 1:

1) Selection Sort: in each loop, the smallest element will be found and the smallest element will be swapped with the first element of the un-sorted array.

	Initial Array: 			A X B T S Q C

	First Pass: 			A X B T S Q C
		Start index 0, 6 comparisons
		Swap nothing

	Second Pass: 			A B C T S Q X
		Start index 1, 5 comparisons
		Swap X and C: A B C T S Q X

	Third Pass: 			A B C T S Q X
		Start index 2, 4 comparisons
		Swap nothing

	Fourth Pass: 			A B C Q S T X
		Start index 3, 3 comparisons
		Swap T and Q

	Fifth Pass: 			A B C Q S T X
		Start index 4, 2 comparisons
		Swap Nothing

	Sixth Pass: 			A B C Q S T X
		Start index 5, 1 comparison
		Swap Nothing

	Hence after sorting: 	A B C Q S T X

	Selection Sort # of Passes: 6


2) Insetion Sort: in each loop, insertion sort removes one element from the unsorted region, finds the location it belongs within the sorted list, and inserts it there. 

	Initial: 				A X B T S Q C

	First Pass:				A X
		Compare char at index 1. Number of comparisons: 1

	Second Pass:			A B X
		Compare char at index 2. Number of comparisons: 1

	Third Pass:				A B T X
		Compare char at index 3. Number of comparisons: 1

	Fourth Pass: 			A B S T X
		Compare char at index 4. Number of comparisons: 2

	Fifth Pass:				A B Q S T X
		Compare char at index 5. Number of comparisons: 3

	Sixth Pass:				A B C Q S T X
		Compare char at index 6. Number of comparisosn: 4

	Hence after sorting: 	A B C Q S T X


Problem 2:

A) Determine if 2 arrays contain the none of the same elements
	
	1. Create an algorithm

					different(A, B){
				1.		n = length of A;
				2.		if n != length of B
				3.			return true;
				4.		for i = 0 to n-1{
				5.			for j = 0 to n-1{
				6.				if A[i] == B[j]{
				7.					return false;
				8.				}else{
				9.					temp = true;
								}
							}	
						}
				10.		return true
					}

	2. Factors that influences the running time
		- If the lengths of the two arrays are not the same, then the program returns true and would exit on two steps (constant time)
		- If the lengths are the same, then the algorithm has to look through each element of the first array in the second array

	3. Operations that must be counted
		- (n+1) for the first for loop with i
		- (n(n+1)) for the second for loop with j
		- n^2 for the if statement with the two for loops

	4. Count operations by code
	 	- (n+1) for the first for loop with i
		- (n(n+1)) for the second for loop with j
		- n^2 for the if statement with the two for loops

	5. Determine the best and worst case
		Worst case: if both arrays are the same and equal number of elements becase the two loops will be executed completely
			- 2n^2 + 2n + 2

		Best case: if both arrays only had one element because the algorithm run in constant time
			- n^2 + n

	6. Put into Big O
		- 2n^2 + 2n + 2 = O(n^2)

B. Total number of character that have a duplicate within a string

	1. Create an algorithm

					countDuplicates(s){
				1.		n = length of s;
				2.		for i = 0 to n-1{
				3.			for j = 0 to n-1{
				4.				if s(i) > s(j){
				5.					c = s(i);
				6.					s(i) = s(j);
				7.					s(j) = c;
								}
							}
						}
				8.		count = 0;
				9.		equal = false;
				10.		for i = 1 to n-1{
				11.			if s(i) == s(i+1){
				12.				count++;
				13.				if equal == false{
				14.					count++;
				15.					equal = true;
				16.				}else{
				17.					equal = false;
								}
							}
						}
				18.		return count;
					}

	2. Factors that influences the running time
		- If the given string has length n and has some duplicates characters, the algorithm sorts the string first and then checks all characters next to each other
		- if the character next to each other are the same, it incremetns the count and return the count

	3. Operations that must be counted
		- The first for loop counts as (n+1)
		- The second for loop counts as (n(n+1)) = n^2 + n
		- Everything inside counts are n^2
		- The third for loop counts as n
		- Everything inside the if statements count as (n-1)

	4. Count operations by code
		- The first for loop counts as (n+1)
		- The second for loop counts as (n(n+1)) = n^2 + n
		- Everything inside counts are n^2
		- The third for loop counts as n
		- Everything inside the if statements count as (n-1)

	5. Determine the best and worst case
		Worst case: The string with n same character because it needs to sort it
		5n^2 + 9n - 1

		Best case: The string with one character
		n

	6. Put into Big O
		5n^2 + 9n - 1 = O(n^2)

C. Finding a row where every entry is 'a' in a 2D array

	1. Create an algorithm

					hasA(arr m,n){
				1.		for i = 0 to m-1{
				2.			temp = true;
				3.			for j = 0 to n-1{
				4.				if arr[i][j] != 'a'{
				5.					temp = false;
								}
							}
				6.			if temp == true{
				7.				return true;
							}
						}
				8.		return false;
					}	

	2. Factors that influences the running time
		- The program looks through each cell of the 2D array in the worst case
		- Adding one to the count for every element that is 'a'
		- The time for the loop to run

	3. Operations that must be counted
		- The first for loop for m is (m+1)
		- A statement that runs once is m
		- The second for loop for n - (n+1)
		- The if statement inside the nested for loops is (m*n)
		- The second if statement is n

	4. Count operations by code
		- The first for loop for m is (m+1)
		- A statement that runs once is m
		- The second for loop for n - (n+1)
		- The if statement inside the nested for loops is (m*n)
		- The second if statement is n

	5. Determine the best and worst case
		- Worst case: The 2D array does not have the row with all 'a' or its the last row with all 'a' because the program has to run through completely
		2m*n + 3m + n + 4

		- Best case: The row we are looking for is the first row because the algorithm returns true after processing the first row
		m*n

	6. Put into Big O
		2m*n + 3m + n + 4 = O(m*n)

